{"ast":null,"code":"import * as React from 'react';\n\nconst useThemePreference = () => {\n  const [theme, setTheme] = React.useState('light');\n\n  const toggleTheme = () => {\n    setTheme(theme === 'light' ? 'dark' : 'light');\n  };\n\n  const storeUserSetPreference = pref => localStorage.setItem('theme', pref);\n\n  const root = typeof document !== 'undefined' && document.documentElement;\n  React.useEffect(() => {\n    const initialTheme = root.style.getPropertyValue('--initial-color-mode');\n    setTheme(initialTheme === 'dark' ? 'dark' : 'light');\n  }, [root.style]);\n  React.useEffect(() => {\n    if (theme === 'dark') {\n      root.setAttribute('data-theme', 'dark');\n      storeUserSetPreference('dark');\n    }\n\n    if (theme === 'light') {\n      root.removeAttribute('data-theme');\n      storeUserSetPreference('light');\n    }\n  }, [theme, root]);\n  return {\n    theme,\n    toggleTheme\n  };\n};\n\nexport { useThemePreference };","map":{"version":3,"sources":["/Users/juliosoto/Documents/dev/portfolio-v3/node_modules/@juliosoto/utils/hooks/useThemePreference.tsx"],"names":["React","useThemePreference","theme","setTheme","useState","toggleTheme","storeUserSetPreference","pref","localStorage","setItem","root","document","documentElement","useEffect","initialTheme","style","getPropertyValue","setAttribute","removeAttribute"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;AAIA,MAAMC,kBAAkB,GAAG,MAAM;AAC/B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBH,KAAK,CAACI,QAAN,CAAsB,OAAtB,CAA1B;;AAEA,QAAMC,WAAW,GAAG,MAAM;AACxBF,IAAAA,QAAQ,CAACD,KAAK,KAAK,OAAV,GAAoB,MAApB,GAA6B,OAA9B,CAAR;AACD,GAFD;;AAIA,QAAMI,sBAAsB,GAAIC,IAAD,IAAUC,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BF,IAA9B,CAAzC;;AAEA,QAAMG,IAAI,GAAG,OAAOC,QAAP,KAAoB,WAApB,IAAmCA,QAAQ,CAACC,eAAzD;AAEAZ,EAAAA,KAAK,CAACa,SAAN,CAAgB,MAAM;AACpB,UAAMC,YAAY,GAAGJ,IAAI,CAACK,KAAL,CAAWC,gBAAX,CAA4B,sBAA5B,CAArB;AACAb,IAAAA,QAAQ,CAACW,YAAY,KAAK,MAAjB,GAA0B,MAA1B,GAAmC,OAApC,CAAR;AACD,GAHD,EAGG,CAACJ,IAAI,CAACK,KAAN,CAHH;AAKAf,EAAAA,KAAK,CAACa,SAAN,CAAgB,MAAM;AACpB,QAAIX,KAAK,KAAK,MAAd,EAAsB;AACpBQ,MAAAA,IAAI,CAACO,YAAL,CAAkB,YAAlB,EAAgC,MAAhC;AACAX,MAAAA,sBAAsB,CAAC,MAAD,CAAtB;AACD;;AACD,QAAIJ,KAAK,KAAK,OAAd,EAAuB;AACrBQ,MAAAA,IAAI,CAACQ,eAAL,CAAqB,YAArB;AACAZ,MAAAA,sBAAsB,CAAC,OAAD,CAAtB;AACD;AACF,GATD,EASG,CAACJ,KAAD,EAAQQ,IAAR,CATH;AAWA,SAAO;AAAER,IAAAA,KAAF;AAASG,IAAAA;AAAT,GAAP;AACD,CA5BD;;AA8BA,SAASJ,kBAAT","sourcesContent":["import * as React from 'react';\n\ntype Theme = 'light' | 'dark';\n\nconst useThemePreference = () => {\n  const [theme, setTheme] = React.useState<Theme>('light');\n\n  const toggleTheme = () => {\n    setTheme(theme === 'light' ? 'dark' : 'light');\n  };\n\n  const storeUserSetPreference = (pref) => localStorage.setItem('theme', pref);\n\n  const root = typeof document !== 'undefined' && document.documentElement;\n\n  React.useEffect(() => {\n    const initialTheme = root.style.getPropertyValue('--initial-color-mode');\n    setTheme(initialTheme === 'dark' ? 'dark' : 'light');\n  }, [root.style]);\n\n  React.useEffect(() => {\n    if (theme === 'dark') {\n      root.setAttribute('data-theme', 'dark');\n      storeUserSetPreference('dark');\n    }\n    if (theme === 'light') {\n      root.removeAttribute('data-theme');\n      storeUserSetPreference('light');\n    }\n  }, [theme, root]);\n\n  return { theme, toggleTheme };\n};\n\nexport { useThemePreference };\n"]},"metadata":{},"sourceType":"module"}